param(
    $resourcePackagesDirectory
)

$bootstrapVersions = @("Bootstrap5")
$bootstrapDictionaries = @()
$newTemplatesDirectory = "$PSScriptRoot\..\content\ResourcePackages"

foreach($bv in $bootstrapVersions)
{
    $dictionary = Get-Content "$PSScriptRoot\$($bv).json" | ConvertFrom-Json
    $bootstrapDictionaries += $dictionary
}

function GetFileSHA256HashUTF8($filePath)
{
    try 
    {
        $content = Get-Content -Path $filePath -Encoding UTF8
        if($content -and $content -imatch "generated by Sitefinity CLI")
        {
            $content = $content | Select-Object -Skip 5 # Removes the Sitefinity CLI generated comment lines
        }
        
        if($content)
        {
            $bytes = [System.Text.Encoding]::UTF8.GetBytes($content)
            $stream = [System.IO.MemoryStream]::new($bytes)
            
            if($stream)
            {
                $hash = (Get-FileHash -InputStream $stream -Algorithm SHA256).Hash
                return $hash
            }
        } 
    }
    catch 
    {
        Write-Host "FAILED to parse the file hash for '$filePath' file! Error: $_"
    }    

    return $null
}

function UpdateDefaultTemplateFile($templatesDictionary, $fileKey, $hash, $fileInfo, $templatesDictionaryName)
{
    try 
    {
        if($templatesDictionary."$fileKey" -and $templatesDictionary."$fileKey".Contains($hash))
        {
            $newTemplateFile = "$($newTemplatesDirectory)\$($templatesDictionaryName)\$($fileKey)"
            $destinationFile = $fileInfo.FullName
            $destinationDirectory = $fileInfo.Directory.FullName

            if((GetFileSHA256HashUTF8 -filePath $newTemplateFile) -ne (GetFileSHA256HashUTF8 -filePath $destinationFile))
            {
                Write-Host "Update file '$destinationFile' with '$newTemplateFile'..."
                Copy-Item -Path $newTemplateFile -Destination $destinationFile -Force
            }

            if($fileKey.Contains("MVC\Views"))
            {
                $viewDirectory = Split-Path $fileKey
                $viewNewDirectory = "$($newTemplatesDirectory)\$($templatesDictionaryName)\$($viewDirectory)"
                if(Test-Path $viewNewDirectory)
                {
                    Get-ChildItem $viewNewDirectory | %{
                        if(!(Test-Path "$($destinationDirectory)\$($_.Name)"))
                        {
                            # Copy missing widget templates
                            Copy-Item $_.FullName -Destination $destinationDirectory -Force
                        }
                    }
                }
            }

            return $true
        }
    }
    catch 
    {
        Write-Host "FAILED to update '$($fileInfo.FullName)' template file! Error: $_"
    }

    return $false
}

Get-ChildItem $resourcePackagesDirectory -Directory | %{
    $templatesDirectory = $_.FullName
    if(Test-Path (Join-Path $templatesDirectory "MVC\Views"))
    {
        $bootstrapVersion = $null
        $currentBootstrapDictionary = $null
        $packageVersionFile = "$($_.FullName)\package.json"
        if(Test-Path $packageVersionFile)
        {
            $packageVersionJsonContent = Get-Content $packageVersionFile
            if($packageVersionJsonContent -match "bootstrap-5-package")
            {
                $bootstrapVersion = "Bootstrap5"
                $currentBootstrapDictionary = $bootstrapDictionaries[0]
            }
        }

        Write-Host "Processing '$templatesDirectory' templates directory..."
        Get-ChildItem $templatesDirectory -Recurse -File | %{
            $file = $_.FullName.Replace($templatesDirectory, "").TrimStart("\")
            $hash = GetFileSHA256HashUTF8 -filePath $_.FullName

            if($bootstrapVersion -eq $null)
            {
                $index = 0
                foreach($bootstrapDictionary in $bootstrapDictionaries)
                {
                    $updateResult = UpdateDefaultTemplateFile -templatesDictionary $bootstrapDictionary `
                                                            -fileKey $file `
                                                            -hash $hash `
                                                            -fileInfo $_ `
                                                            -templatesDictionaryName $bootstrapVersions[$index]
                    if ($updateResult) 
                    {
                        break;
                    }

                    $index++
                }
            }
            else
            {            
                $updateResult = UpdateDefaultTemplateFile -templatesDictionary $currentBootstrapDictionary `
                                                        -fileKey $file `
                                                        -hash $hash `
                                                        -fileInfo $_ `
                                                        -templatesDictionaryName $bootstrapVersion      
            }
        }        
    }
}