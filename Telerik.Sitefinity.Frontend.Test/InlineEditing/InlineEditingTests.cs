using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.IO;
using Telerik.Sitefinity.Frontend.InlineEditing;
using Telerik.Sitefinity.Frontend.TestUtilities.DummyClasses.Models;
using Telerik.Sitefinity.Utilities.HtmlParsing;

namespace Telerik.Sitefinity.Frontend.Test.InlineEditing
{
    /// <summary>
    /// Tests the InlineEditing functionality.
    /// </summary>
    [TestClass]
    public class InlineEditingTests
    {
        #region HtmlRegion class tests

        [TestMethod]
        [Owner("Bonchev")]
        [Description("Checks whether the HtmlRegion class properly closes a given region when disposed")]
        public void HtmlRegion_CreateFakeHtmlContentInRegion_IsRegionProperlyClosed()
        {
            //Arrange: create text writer and dummy content 
            TextWriter writer = new StringWriter();

            string dummyHtmlContent = string.Format("<{0}>{1}", this.htmlWrapperTag, this.dummyContent);

            //Act: create the HTML region 
            using (new HtmlRegion(writer, this.htmlWrapperTag))
            {
                writer.WriteLine(dummyHtmlContent);
            }

            var outPut = writer.ToString();

            //Assert: Parses the generated by the HtmlRegion HTML checks if the HTML content is properly wrapped into a region and if this region is properly closed
            using (HtmlParser parser = new HtmlParser(outPut))
            {
                var chunk = parser.ParseNext();
                Assert.IsNotNull(chunk, "Chunk shouldn't be null.");
                Assert.IsTrue(chunk.TagName.Equals(this.htmlWrapperTag, StringComparison.InvariantCultureIgnoreCase), "The html tag is not div.");
                this.AssertContentAndCloseTag(parser);
            }
        }

        #endregion

        #region HtmlProcessor class tests

        #region CreateInlineEditingRegion

        [TestMethod]
        [Owner("Bonchev")]
        [Description("Checks whether CreateInlineEditingRegion method of the HtmlProcessor class properly wraps a given HTML content into a InlineEditing region.")]
        public void CreateInlineEditingRegion_DummyContent_IsWrappedIntoInlineEditingRegion()
        {
            //Arrange: create dummy data which will be set to the related attributes inside the region div tag
            TextWriter writer = new StringWriter();
            string providerName = "dummyProvider";
            string type = "dummyType";
            var id = Guid.NewGuid();

            //Act: create the CreateInlineEditingRegion
            var htmlProcessor = new HtmlProcessor();

            using (htmlProcessor.CreateInlineEditingRegion(writer, providerName, type, id))
            {
                writer.WriteLine(this.dummyContent);
            }

            var outPut = writer.ToString();

            //Assert: Parses the generated by the htmlTransformationProxy HTML checks if the HTML content is properly wrapped into a div tag
            //which has the required by the InlineEditing attributes
            //and these attributes has a proper data assigned
            using (HtmlParser parser = new HtmlParser(outPut))
            {
                var chunk = parser.ParseNext();
                Assert.IsNotNull(chunk);

                //checks if the HTML tag is of type div and if it has the required attributes
                Assert.IsTrue(chunk.TagName.Equals(this.htmlWrapperTag, StringComparison.InvariantCultureIgnoreCase));
                Assert.IsTrue(chunk.HasAttribute(this.idAttribute), "The id of the item is not appended as attribute correctly.");
                Assert.IsTrue(chunk.HasAttribute(this.providerAttribute), "The provider is not appended as attribute correctly.");
                Assert.IsTrue(chunk.HasAttribute(this.typeAttribute), "The id type the item is not appended as attribute correctly.");

                //checks if the required attributes has proper values assigned to them
                Assert.AreEqual<string>(providerName, chunk.GetParamValue(this.providerAttribute), "The value of the provider attribute is not correct.");
                Assert.AreEqual<string>(type, chunk.GetParamValue(this.typeAttribute), "The value of the provider attribute is not correct.");
                Assert.AreEqual<string>(id.ToString(), chunk.GetParamValue(this.idAttribute), "The value of the id attribute is not correct.");

                this.AssertContentAndCloseTag(parser);
            }
        }

        #endregion

        #region GetStringContent

        [TestMethod]
        [Owner("Bonchev")]
        [Description("Checks whether GetStringContent method of the HtmlProcessor class properly wraps a given HTML content into a InlineEditing region for a property of the model which is marked with FieldInfoAttribute.")]
        public void GetStringContent_WithInlineEditingAttribute_TextElelementProperlyCreated()
        {
            //Arrange
            var htmlProcessor = new HtmlProcessor();
            var dummyWidgetModel = new DummyWidgetModel { EditableContent = this.dummyContent, NonEditableContent = this.dummyContent };

            string fieldName = "DummyWidget";
            string type = "LongText";

            //Act
            var inlineeditingAwareContent = htmlProcessor.GetStringContent(dummyWidgetModel, "EditableContent");

            //Assert
            using (HtmlParser parser = new HtmlParser(inlineeditingAwareContent))
            {
                var chunk = parser.ParseNext();
                Assert.IsNotNull(chunk);

                //checks if the HTML tag is of type div and if it has the required attributes
                Assert.IsTrue(chunk.TagName.Equals(this.htmlWrapperTag, StringComparison.InvariantCultureIgnoreCase), "There is no wrapper div appended to the property representation.");
                Assert.IsTrue(chunk.HasAttribute(this.fieldAttribute), "The field attribute is not appended correctly.");
                Assert.IsTrue(chunk.HasAttribute(this.fieldTypeAttribute), "The field type attribute is not appended correctly.");

                //checks if the required attributes has proper values assigned to them
                Assert.AreEqual<string>(fieldName, chunk.GetParamValue(this.fieldAttribute), "The value of the field attribute is not correct.");
                Assert.AreEqual<string>(type, chunk.GetParamValue(this.fieldTypeAttribute), "The value of the fieldType attribute is not correct.");

                this.AssertContentAndCloseTag(parser);
            }
        }

        [TestMethod]
        [Owner("Bonchev")]
        [Description("Checks whether GetStringContent method of the HtmlProcessor class properly preserves the HTML content when the property of the model is not marked with FieldInfoAttribute.")]
        public void GetStringContent_WithoutInlineEditingAttribute_PreservesContent()
        {
            //Arrange
            var htmlProcessor = new HtmlProcessor();
            var dummyWidgetModel = new DummyWidgetModel { EditableContent = dummyContent, NonEditableContent = dummyContent };

            //Act
            var nonInlineeditingAwareContent = htmlProcessor.GetStringContent(dummyWidgetModel, "NonEditableContent");

            //Assert
            Assert.AreEqual<string>(this.dummyContent, nonInlineeditingAwareContent, "The content is not preserved correctly.");
        }

        #endregion

        #endregion

        #region Helper methods

        /// <summary>
        /// Asserts if the content is preserved and whether expected close tag is available.
        /// </summary>
        /// <param name="parser">The parser.</param>
        private void AssertContentAndCloseTag(HtmlParser parser)
        {
            string content = null;
            HtmlChunk chunk = null;
            HtmlChunk nextChunk = null;
            while ((nextChunk = parser.ParseNext()) != null)
            {
                chunk = nextChunk;
                if (nextChunk.Type == HtmlChunkType.Text)
                {
                    content = nextChunk.GenerateHtml();
                }
            }

            Assert.IsTrue(content.StartsWith(dummyContent, StringComparison.InvariantCultureIgnoreCase), "The inner content is not preserved correctly.");

            //checks if the region is properly closed
            Assert.IsTrue(chunk.TagName.Equals(this.htmlWrapperTag, StringComparison.InvariantCultureIgnoreCase), "The last tag is not div.");
            Assert.IsTrue(chunk.Type == HtmlChunkType.CloseTag, "The last tag is not closing tag.");
        } 

        #endregion

        #region Private fields

        private string dummyContent = "Lorem ipsum dolor sit amet, consectetuer adipiscing elit";
        private string htmlWrapperTag = "div";
        private string providerAttribute = "data-sf-provider";
        private string typeAttribute = "data-sf-type";
        private string idAttribute = "data-sf-id";
        private string fieldAttribute = "data-sf-field";
        private string fieldTypeAttribute = "data-sf-ftype"; 

        #endregion
    } 
}
